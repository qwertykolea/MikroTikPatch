name: Patch Mikrotik RouterOS 7.x arm
on:
  # push:
  #   branches: [ "main" ]
  #schedule:
  #  - cron: "0 0 * * *"
  workflow_dispatch:

permissions:
  contents: write

env:
  CUSTOM_LICENSE_PRIVATE_KEY: '414FB96F9AA8FD5B6F2F995C8BAA818F15014C094C5C3653A7C0A636C1F2C907'
  CUSTOM_LICENSE_PUBLIC_KEY: '299F18DF19216683322543CA8649A33628B5BDA53C2C7731EC132113D9EB4167'
  CUSTOM_NPK_SIGN_PRIVATE_KEY: '2FCEF81602E48E7C4B588F9383FF1EF20CF25B153192F6C97F4CFD4E438EC043'
  CUSTOM_NPK_SIGN_PUBLIC_KEY: '5F3012D7B82CD624CB09A7550325E956B839A18CFA079BD59627701C6E29DA87'
  CUSTOM_CLOUD_PUBLIC_KEY: '5F3012D7B82CD624CB09A7550325E956B839A18CFA079BD59627701C6E29DA87'
  MIKRO_LICENSE_PUBLIC_KEY: '8E1067E4305FCDC0CFBF95C10F96E5DFE8C49AEF486BD1A4E2E96C27F01E3E32'
  MIKRO_NPK_SIGN_PUBLIC_LKEY: 'C293CED638A2A33C681FC8DE98EE26C54EADC5390C2DFCE197D35C83C416CF59'
  MIKRO_CLOUD_PUBLIC_KEY: '5F3012D7B82CD624CB09A7550325E956B839A18CFA079BD59627701C6E29DA87'
  MIKRO_LICENCE_URL: "upgrade.mikrotik.com"
  CUSTOM_LICENCE_URL: "upgrade.mikrotik.com"
  MIKRO_UPGRADE_URL: "upgrade.mikrotik.com"
  CUSTOM_UPGRADE_URL: "upgrade.mikrotik.com"
  MIKRO_RENEW_URL: "upgrade.mikrotik.com"
  CUSTOM_RENEW_URL: "upgrade.mikrotik.com"
  MIKRO_CLOUD_URL: "upgrade.mikrotik.com"
  CUSTOM_CLOUD_URL: "upgrade.mikrotik.com"

jobs:
  Set_BuildTime:
    runs-on: ubuntu-22.04
    outputs:
      BUILD_TIME: ${{ steps.set_buildtime.outputs.BUILD_TIME }}
    steps:
      - name: Set build time
        id: set_buildtime
        run: echo "BUILD_TIME=$(date +'%s')" >> $GITHUB_OUTPUT

  Patch_RouterOS:
    needs: Set_BuildTime
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        arch: [arm]
        channel: [stable]
    env:
      TZ: 'Asia/Shanghai'
      LATEST_VERSION: ""
      ARCH: ""

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Get latest routeros version
      id: get_latest
      run: |
        echo $(uname -a)
        LATEST_VERSION=$(wget -nv -O - https://${{ env.MIKRO_UPGRADE_URL }}/routeros/NEWESTa7.${{ matrix.channel }} | cut -d ' ' -f1)
        echo Latest Version:$LATEST_VERSION
        if [ "${{ github.event_name }}" == "schedule" ]; then
          _LATEST_VERSION=$(wget -nv -O - https://${{ env.CUSTOM_UPGRADE_URL }}/routeros/NEWESTa7.${{ matrix.channel }} | cut -d ' ' -f1)
          if [ "$_LATEST_VERSION" == "$LATEST_VERSION" ]; then
            echo "No new version found"
            echo "has_new_version=false" >> $GITHUB_OUTPUT
            exit 0
          fi
        fi
        echo "has_new_version=true" >> $GITHUB_OUTPUT
        BUILD_TIME=${{ needs.Set_BuildTime.outputs.BUILD_TIME }}
        echo Build Time:$BUILD_TIME
        #wget -nv -O CHANGELOG https://${{ env.MIKRO_UPGRADE_URL }}/routeros/$LATEST_VERSION/CHANGELOG
        #cat CHANGELOG
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        echo "BUILD_TIME=${BUILD_TIME}" >> $GITHUB_ENV
        if [ "${{ matrix.arch }}" == "x86" ]; then
          ARCH=''
          echo "ARCH=$ARCH" >> $GITHUB_ENV
        elif [ "${{ matrix.arch }}" == "arm" ]; then
          ARCH='-arm'
          echo "ARCH=$ARCH" >> $GITHUB_ENV
        fi

    - name: Cache Squashfs
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache-squashfs
      uses: actions/cache@v4
      with:
        path: |
          python3.sfs
          option.sfs
        key: busybox-python3-squashfs-${{ matrix.arch }}

    - name: Create Squashfs for option and python3
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache-squashfs.outputs.cache-hit != 'true'
      run: |
        sudo mkdir -p ./option-root/bin/
        if [ "${{ matrix.arch }}" == "x86" ]; then
          sudo cp busybox/busybox_x86 ./option-root/bin/busybox
          sudo chmod +x ./option-root/bin/busybox
          sudo cp keygen/keygen_x86 ./option-root/bin/keygen
          sudo chmod +x ./option-root/bin/keygen
        elif [ "${{ matrix.arch }}" == "arm" ]; then
          sudo cp busybox/busybox_aarch64 ./option-root/bin/busybox
          sudo chmod +x ./option-root/bin/busybox
          sudo cp keygen/keygen_aarch64 ./option-root/bin/keygen
          sudo chmod +x ./option-root/bin/keygen
        fi
        sudo chmod +x ./busybox/busybox_x86
        COMMANDS=$(./busybox/busybox_x86 --list)
        for cmd in $COMMANDS; do
            sudo ln -sf /pckg/option/bin/busybox ./option-root/bin/$cmd
        done
        sudo mksquashfs option-root option.sfs -quiet -comp xz -no-xattrs -b 256k
        sudo rm -rf option-root
        if [ "${{ matrix.arch }}" == "x86" ]; then
          sudo wget -O cpython-3.11.9.tar.gz -nv https://github.com/indygreg/python-build-standalone/releases/download/20240713/cpython-3.11.9+20240713-x86_64-unknown-linux-gnu-install_only.tar.gz
        elif [ "${{ matrix.arch }}" == "arm" ]; then
          sudo wget -O cpython-3.11.9.tar.gz -nv https://github.com/indygreg/python-build-standalone/releases/download/20240713/cpython-3.11.9+20240713-aarch64-unknown-linux-gnu-install_only.tar.gz
        fi
        sudo tar -xf cpython-3.11.9.tar.gz
        sudo rm cpython-3.11.9.tar.gz
        sudo rm -rf ./python/include
        sudo rm -rf ./python/share
        sudo mksquashfs python python3.sfs -quiet -comp xz -no-xattrs -b 256k
        sudo rm -rf ./python

    - name: Cache NetInstall ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86'
      id: cache-netinstall
      uses: actions/cache@v4
      with:
        path: |
          netinstall.zip
          netinstall.tar.gz
        key: netinstall-${{ env.LATEST_VERSION }}

    - name: Get netinstall ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86' && steps.cache-netinstall.outputs.cache-hit != 'true'
      run: |
        sudo wget -nv -O netinstall.zip https://download.mikrotik.com/routeros/$LATEST_VERSION/netinstall-$LATEST_VERSION.zip
        sudo wget -nv -O netinstall.tar.gz https://download.mikrotik.com/routeros/$LATEST_VERSION/netinstall-$LATEST_VERSION.tar.gz

    - name: Patch netinstall ${{ env.LATEST_VERSION }}
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86'
      run: |
        sudo unzip netinstall.zip
        sudo -E python3 patch.py netinstall netinstall.exe
        sudo zip netinstall-$LATEST_VERSION.zip ./netinstall.exe
        sudo tar -xvf netinstall.tar.gz
        sudo -E python3 patch.py netinstall netinstall-cli
        sudo tar -czvf netinstall-$LATEST_VERSION.tar.gz ./netinstall-cli

    - name: Cache mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true'
      id: cache-mikrotik
      uses: actions/cache@v4
      with:
        path: |
          mikrotik.iso
        key: mikrotik-${{ env.LATEST_VERSION }}-${{ matrix.arch }}

    - name: Get mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true' && steps.cache-mikrotik.outputs.cache-hit != 'true'
      run: |
          sudo wget -nv -O mikrotik.iso https://download.mikrotik.com/routeros/$LATEST_VERSION/mikrotik-$LATEST_VERSION$ARCH.iso


    - name: Patch mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}.iso
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        sudo apt-get install -y mkisofs xorriso > /dev/null
        sudo mkdir ./iso 
        sudo mount -o loop,ro mikrotik.iso ./iso
        sudo mkdir ./new_iso
        sudo cp -r ./iso/* ./new_iso/
        sudo rsync -a ./iso/ ./new_iso/
        sudo umount ./iso
        sudo rm -rf ./iso
        sudo mv ./new_iso/routeros-$LATEST_VERSION$ARCH.npk ./
        sudo -E python3 patch.py npk routeros-$LATEST_VERSION$ARCH.npk
        NPK_FILES=$(find ./new_iso/*.npk)
        for file in $NPK_FILES; do
            sudo -E python3 npk.py sign $file $file
        done
        sudo cp routeros-$LATEST_VERSION$ARCH.npk ./new_iso/
        sudo -E python3 npk.py create ./new_iso/gps-$LATEST_VERSION$ARCH.npk ./option-$LATEST_VERSION$ARCH.npk option ./option.sfs -desc="busybox"
        sudo cp option-$LATEST_VERSION$ARCH.npk ./new_iso/
        sudo -E python3 npk.py create ./new_iso/gps-$LATEST_VERSION$ARCH.npk ./python3-$LATEST_VERSION$ARCH.npk python3 ./python3.sfs -desc="python 3.11.9"
        sudo cp python3-$LATEST_VERSION$ARCH.npk ./new_iso/
        sudo mkdir ./efiboot
        sudo mount -o loop ./new_iso/efiboot.img ./efiboot
        if [ "${{ matrix.arch }}" == "x86" ]; then
          sudo -E python3 patch.py kernel ./efiboot/linux.x86_64
          sudo cp ./efiboot/linux.x86_64 ./BOOTX64.EFI
          sudo cp ./BOOTX64.EFI ./new_iso/isolinux/linux
          sudo umount ./efiboot
          sudo mkisofs -o mikrotik-$LATEST_VERSION$ARCH.iso \
                      -V "MikroTik $LATEST_VERSION ${{ matrix.arch }}" \
                      -sysid "" -preparer "MiKroTiK" \
                      -publisher "" -A "MiKroTiK RouterOS" \
                      -input-charset utf-8 \
                      -b isolinux/isolinux.bin \
                      -c isolinux/boot.cat \
                      -no-emul-boot \
                      -boot-load-size 4 \
                      -boot-info-table \
                      -eltorito-alt-boot \
                      -e efiboot.img \
                      -no-emul-boot \
                      -R -J \
                      ./new_iso
        elif [ "${{ matrix.arch }}" == "arm" ]; then
          sudo -E python3 patch.py kernel ./efiboot/EFI/BOOT/BOOTAA64.EFI
          sudo umount ./efiboot
          sudo xorriso -as mkisofs -o mikrotik-$LATEST_VERSION$ARCH.iso \
                      -V "MikroTik $LATEST_VERSION ${{ matrix.arch }}" \
                      -sysid "" -preparer "MiKroTiK" \
                      -publisher "" -A "MiKroTiK RouterOS" \
                      -input-charset utf-8 \
                      -b efiboot.img \
                      -no-emul-boot \
                      -R -J \
                      ./new_iso
        fi
        sudo rm -rf ./efiboot
        sudo mkdir ./all_packages
        sudo cp ./new_iso/*.npk ./all_packages/
        sudo rm -rf ./new_iso
        cd ./all_packages
        sudo zip ../all_packages-${{ matrix.arch }}-$LATEST_VERSION.zip *.npk
        cd ..

    - name: Cache refind
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86'
      id: cache-refind
      uses: actions/cache@v4
      with:
        path: refind-bin-0.14.2.zip
        key: refind

    - name: Get refind
      if: steps.get_latest.outputs.has_new_version == 'true' && matrix.arch == 'x86' && steps.cache-refind.outputs.cache-hit != 'true'
      run: sudo wget -nv -O refind-bin-0.14.2.zip https://nchc.dl.sourceforge.net/project/refind/0.14.2/refind-bin-0.14.2.zip

    

   

    - name: Clear Cloudflare cache
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        curl --request POST --url "https://api.cloudflare.com/client/v4/zones/fe6831ed6dc9e6235e69ef2a31f2e7fe/purge_cache" \
            --header "Authorization: Bearer 9GDQkzU51QXaqzp1qMjyFKpyeJyOdnNoG9GZQaGP" \
            --header "Content-Type:application/json" \
            --data '{"purge_everything": true}'

    - name: Delete Release tag ${{ env.LATEST_VERSION }} ${{ matrix.arch }}
      if: steps.get_latest.outputs.has_new_version == 'true'
      run: |
        HEADER="Authorization: token ${{ secrets.GITHUB_TOKEN }}"
        RELEASE_INFO=$(curl -s -H $HEADER https://api.github.com/repos/${{ github.repository }}/releases/tags/$LATEST_VERSION$ARCH)
        RELEASE_ID=$(echo $RELEASE_INFO | jq -r '.id')
        echo "Release ID: $RELEASE_ID"
        if [ "$RELEASE_ID" != "null" ]; then
            curl -X DELETE -H "$HEADER" https://api.github.com/repos/${{ github.repository }}/git/refs/tags/$LATEST_VERSION$ARCH
            echo "Tag $LATEST_VERSION$ARCH deleted successfully."
            curl -X DELETE -H "$HEADER" https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID
            echo "Release with tag $LATEST_VERSION$ARCH deleted successfully."
        else
            echo "Release not found for tag: $LATEST_VERSION)"
        fi

    - name: Create Release tag ${{ env.LATEST_VERSION }} ${{ matrix.arch }}
      if: steps.get_latest.outputs.has_new_version == 'true'
      uses: softprops/action-gh-release@v2
      with:
        name: "RouterOS ${{ env.LATEST_VERSION }} ${{ matrix.arch }}"
        #body_path: "CHANGELOG"
        tag_name: ${{ env.LATEST_VERSION }}${{ env.ARCH }}
        make_latest:  ${{ matrix.channel == 'stable'}} && ${{ matrix.arch == 'x86'}}
        prerelease:  ${{ matrix.channel == 'testing' }}
        files: |
          mikrotik-${{ env.LATEST_VERSION }}${{ env.ARCH }}.iso
          chr-${{ env.LATEST_VERSION }}*.zip
          netinstall-${{ env.LATEST_VERSION }}.*
          install-image-${{ env.LATEST_VERSION }}.zip
          routeros-${{ env.LATEST_VERSION }}${{ env.ARCH }}.npk
          option-${{ env.LATEST_VERSION }}${{ env.ARCH }}.npk
          all_packages-*-${{ env.LATEST_VERSION }}.zip
          *.EFI
